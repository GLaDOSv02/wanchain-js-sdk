'use strict'

let     BtcTransaction        = require('../../transaction/btc/BtcTransaction');
let     BtcDataSign           = require('../../data-sign/btc/BtcDataSign');
let     NormalTxBtcDataCreator= require('../../tx-data-creator/btc/NormalTxBtcDataCreator');
let     NormalChain           = require('../common/NormalChain');
let     ccUtil                = require('../../../api/ccUtil');

class NormalChainBtc extends NormalChain{
  /**
   * @param: {Object} -
   *     input {
   *         utxos:          - inputs to build vin
   *         to:             - target address
   *         value:          - amount to send
   *         feeRate:        - 
   *         changeAddress:  - address to send if there's any change
   *         password:       - to decrypt private key
   *     }
   * @param: {Object} -
   *     config {
   *     }
   */
  constructor(input,config) {
    super(input,config);
  }

  /**
   * Same with {@link NormalChain#checkPreCondition NormalChain#checkPreCondition}
   * @returns {{code: boolean, result: null}|transUtil.this.retResult|{code, result}}
   */
  checkPreCondition(){
    global.logger.debug("Entering NormalChainBtc::checkPreCondition");
    // Asssume failed firstly
    this.retResult.code = false;
    if (!this.input.hasOwnProperty('utxos')){ 
        global.logger.error("Input missing attribute 'utxos'");
        return this.retResult;
    }
    if (!this.input.hasOwnProperty('to')){ 
        global.logger.error("Input missing attribute 'to'");
        return this.retResult;
    }
    if (!this.input.hasOwnProperty('value')){ 
        global.logger.error("Input missing attribute 'value'");
        return this.retResult;
    }
    if (!this.input.hasOwnProperty('password')){ 
        global.logger.error("Input missing attribute 'password'");
        return this.retResult;
    }
    if (!this.input.hasOwnProperty('changeAddress')){ 
        global.logger.error("Input missing attribute 'changeAddress'");
        return this.retResult;
    }
    if (!this.input.hasOwnProperty('feeRate')){ 
        global.logger.error("Input missing attribute 'feeRate'");
        return this.retResult;
    }

    /* Check if input utxo is enough*/
    let balance = ccUtil.getUTXOSBalance(this.input.utxos);
    if (balance <= this.input.value) {
        global.logger.error("UTXO balance is not enough");
        return this.retResult;
    }

    this.retResult.code = true;
    return this.retResult;
  }

  createTrans(){
    this.retResult.code = true;
    this.retResult.result = new BtcTransaction(this.input,this.config);
    return this.retResult;
  }

  createDataCreator(){
    global.logger.debug("Entering NormalChainBtc::createDataCreator");
    this.retResult.code    = true;
    this.retResult.result  = new NormalTxBtcDataCreator(this.input,this.config);
    return this.retResult;
  }

  createDataSign(){
    global.logger.debug("Entering NormalChainBtc::createDataSign");
    this.retResult.code    = true;
    this.retResult.result  = new BtcDataSign(this.input,this.config);
    return this.retResult;
  }

  preSendTrans(signedData){
    /*let record = {
      "hashX"                  :this.input.hashX,  // input.hashX is generated by NormalChain
      "txHash"                 :this.input.hashX,
      "from"                   :this.trans.commonData.from,
      "to"                     :this.trans.commonData.to,
      "value"                  :this.trans.commonData.value,
      "gasPrice"               :"",
      "gasLimit"               :"", 
      "nonce"                  :"",
      "sendTime"               :parseInt(Number(Date.now())/1000).toString(),
      "sentTime"               :"",
      "successTime"            :"",
      "chainAddr"              :this.config.srcSCAddrKey,
      "chainType"              :this.config.srcChainType,
      "tokenSymbol"            :this.config.tokenSymbol,
      "status"                 :'Sending'
    };*/
    let record = {
        "HashX" :this.input.hashX,  // input.hashX is generated by NormalChain
        "from"  : this.trans.commonData.from,
        "to"    : this.trans.commonData.to,
        "value" : this.trans.commonData.value.toString(10),
        "time"  : Date.now().toString(),
        "txhash": this.input.hashX,
        "chain" : 'BTC',
        "status": "Sending"
    };
    global.logger.info("NormalChainBtc::preSendTrans");
    global.logger.info("collection is :",this.config.normalCollection);
    global.logger.info("record is :",ccUtil.hiddenProperties(record,['x']));
    /**
     * TODO: BTC normal tx doesn't save data in db
     */
    global.wanDb.insertItem(this.config.normalCollection,record);
    this.retResult.code = true;
    return this.retResult;
  }

  /**
   * @override
   */
  transFailed(){
    let hashX  = this.input.hashX;
    let record = global.wanDb.getItem(this.config.normalCollection,{HashX:hashX});
    record.status = "Failed";
    global.logger.info("NormalChainBtc::transFailed");
    global.logger.info("collection is :",this.config.normalCollection);
    global.logger.info("record is :",ccUtil.hiddenProperties(record,['x']));
    global.wanDb.updateItem(this.config.normalCollection,{HashX:record.HashX},record);
    this.retResult.code = true;
    return this.retResult;
  }

  postSendTrans(resultSendTrans){
    global.logger.debug("Entering NormalChainBtc::postSendTrans");
    let txHash      = resultSendTrans;
    let hashX       = this.input.hashX;
    let record      = global.wanDb.getItem(this.config.normalCollection,{HashX:HashX});
    /**
     * TODO: BTC normal tx doesn't save data in db, save sucess directly
     */
    record.status   = 'Success';
    record.txhash   = txHash;
    //let cur         = parseInt(Number(Date.now())/1000).toString();
    //record.sentTime = cur;
    global.logger.info("NormalChainBtc::postSendTrans");
    global.logger.info("collection is :",this.config.normalCollection);
    global.logger.info("record is :",ccUtil.hiddenProperties(record,['x']));
    global.wanDb.updateItem(this.config.normalCollection,{HashX:record.HashX},record);
    this.retResult.code = true;
    return this.retResult;
  }
}

module.exports = NormalChainBtc;
